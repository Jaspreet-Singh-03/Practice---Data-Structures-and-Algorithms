class Solution {
    public int kthSmallest(int[][] matrix, int k) {
        if(matrix==null || matrix.length==0 || matrix[0].length==0)
            return 0;
        int m = matrix.length;
        int n = matrix[0].length;
        int low = matrix[0][0];
        int high = matrix[m-1][n-1];
        while(low<high){
            int target = low + (high-low)/2;
            int[] pair = new int[]{low,high};
            int count = countInMatrix(matrix,target,pair);
            if(count==k)
                return pair[0];
            else if(count<k)
                low = pair[1];
            else
                high = pair[0];
        }
        return low;
    }
    
    public int countInMatrix(int[][] matrix, int target, int[] pair){
        int count = 0;
        int row = matrix.length-1;
        int col = 0;
        while(row>=0 && col<matrix[0].length){
            int val = matrix[row][col];
            if(val>target){
                pair[1] = Math.min(pair[1],val);
                row--;
            }
            else{
                pair[0] = Math.max(pair[0],val);
                count += row+1;
                col++;
            }
        }
        return count;
    }
}